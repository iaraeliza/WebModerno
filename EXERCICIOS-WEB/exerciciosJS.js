/*Crie uma fun√ß√£o que retorna a string "Ol√°, " concatenada com um argumento text (a ser passado para a
fun√ß√£o) e com ponto de exclama√ß√£o "!" no final.
Exemplos:
cumprimentar("Leonardo") // retornar√° "Ol√°, Leonardo!"
cumprimentar("Maria") // retornar√° "Ol√°, Maria!"
*/

function cumprimentar(nome) {
    console.log('Ol√°, ' + nome)
}

cumprimentar('Leonardo')
cumprimentar('Maria')

/*Escreva uma fun√ß√£o que receba a idade de uma pessoa em anos e retorne a mesma idade em dias.
üìï Obs: considere que um ano tem 365 dias. Desconsidere anos bissextos (com 366 dias) e
desconsidere tamb√©m dias decorridos desde o √∫ltimo anivers√°rio.
Exemplos:
converterIdadeEmAnosParaDias(25) // retornar√° 9125
converterIdadeEmAnosParaDias(70) // retornar√° 25550
*/

function converterIdadeEmAnosParaDias(x) {
    console.log(x * 365)
}

converterIdadeEmAnosParaDias(26)

/*Desenvolva uma fun√ß√£o que recebe dois par√¢metros, um √© a quantidade de horas trabalhadas por um
funcion√°rio num m√™s, e o quanto ele recebe por hora. O retorno da fun√ß√£o deve ser a string "Sal√°rio igual a R$
X", em que X √© o quanto o funcion√°rio ganhou no m√™s.
Exemplos:
calcularSalario(150, 40.5) // retornar√° "Sal√°rio igual a R$ 6075"
*/

function salario(horasTrabalhadas, salarioHora) {
    console.log('Sal√°rio igual a R$' + (horasTrabalhadas * salarioHora))
}

salario(150, 40.5)

/*Escreva uma fun√ß√£o que receba um valor booleano ou num√©rico. Se o par√¢metro fornecido for booleano, o
retorno da fun√ß√£o dever√° ser o inverso. Por exemplo, se a entrada for false, retornar√° true. Se o par√¢metro for
num√©rico, o retorno ser√° o n√∫mero inverso. Por exemplo, se for fornecido 1, o retorno ser√° -1. Se o par√¢metro de
entrada n√£o for de nenhum dos tipo acima, retorne "booleano ou n√∫mero esperados, mas o par√¢metro √© do tipo
...".
Exemplos:
inverso(true) // retornar√° false
inverso("6") // retornar√° "booleano ou n√∫mero esperados, mas o par√¢metro √© do tipo string"
inverso(-2000) // retornar√° 2000
inverso("programa√ß√£o") // retornar√° "booleano ou n√∫meros, mas o par√¢metro √© do tipo string"
*/

const inverso = function (z) {
    const tipo = typeof z
    if (tipo == Number) {
        console.log(z * -1)
    } else if (tipo == Boolean) {
        console.log(!z)
    } else {
        console.log(`booleano ou n√∫meros, mas o par√¢metro √© do tipo ${tipo}`)
    }
}



inverso(true)
inverso("6")
inverso(-2000)
inverso("programa√ß√£o")

/*Desenvolva uma fun√ß√£o que recebe dois n√∫meros inteiros n√£o negativos (maiores ou iguais a zero) e realize a
multiplica√ß√£o deles. Por√©m, n√£o utilize o operador de mutiplica√ß√£o.
Exemplo:
multiplicar(5, 5) // retornar√° 25
multiplicar(0, 7) // retornar√° 0

*/

function multiplicar(numx, numy) {
    let resultado = 0
    for (let i = 0; i < numy; i++)
        resultado += numx
    return resultado

}

console.log(multiplicar(5, 5))

/*Escreva uma fun√ß√£o que receba dois par√¢metros. O primeiro par√¢metro √© o elemento que repetir√°, enquanto
que o segundo ser√° o n√∫mero de vezes que haver√° repeti√ß√£o. Um array ser√° retornado.
Exemplos:
repetir("c√≥digo", 2) // retornar√° ["c√≥digo", "c√≥digo"]
repetir(7, 3) // retornar√° [7, 7, 7]

*/

function repetir(elemento, repeti√ß√µes) {
    let resultado = []
    for (let i = 0; i < repeti√ß√µes; i++)

        console.log(resultado)
}

repetir("c√≥digo", 2)
repetir(7, 3)

/*Elabore uma fun√ß√£o que recebe um n√∫mero como par√¢metro e retorne uma string com o s√≠mbolo "+" na
quantidade especificada no par√¢metro.
Exemplos:
simboloMais(2) // retornar√° "++"
simboloMais(4) // retornar√° "++++"
**/

function simboloMais(n) {
    let resultado = ""
    for (let i = 0; i < n; i++)
        resultado += '+'
    console.log(resultado)

}
simboloMais(2)
simboloMais(4)

/*Crie uma fun√ß√£o que receba uma array e retorne o primeiro e o √∫ltimo elemento desse array como um novo array:
Exemplos:
receberPrimeiroEUltimoElemento([7,14,"ol√°"]) // retornar√° [7, "ol√°"]
receberPrimeiroEUltimoElemento([-100, "aplicativo", 16]) // retornar√° [-100, 16]
*/

function receberPrimeiroEUltimoElemento(elemento) {
    const primeiroelemento = elemento.pop()
    const ultimoelemento = elemento.shift()
    console.log([primeiroelemento, ultimoelemento])
}
receberPrimeiroEUltimoElemento([7, 14, "ol√°"])

/*Quando temos um objeto e manipulamos seus atributos, adicionando, atualizando ou removendo-os, estamos
apenas modificando-o, mas, em ess√™ncia, o objeto continua o mesmo, ou seja a sua refer√™ncia de mem√≥ria √© a
mesma.
Num projeto que voc√™ est√° trabalhando, voc√™ foi designado a refatorar diversas fun√ß√µes para que fa√ßam c√≥pias
de objetos e manipulem os dados dessas c√≥pias, com o intuito de evitar efeitos indesej√°veis em algumas
situa√ß√µes devido a refer√™ncias a objetos. Abaixo, est√° a descri√ß√£o de uma dessas fun√ß√µes.
Voc√™ escrever√° uma fun√ß√£o que recebe um objeto como primeiro par√¢metro e, como segundo par√¢metro, o nome
de uma propriedade contida nesse objeto. Em seguida, retorne uma c√≥pia desse objeto sem a propriedade
especificada no segundo par√¢metro.
Exemplos:
removerPropriedade({a: 1, b: 2}, "a") // retornar√° {b: 2}
removerPropriedade({
id: 20,
nome: "caneta",
descricao: "N√£o preenchido"
}, "descricao") // retornar√° {id: 20, nome: "caneta"}
üí° A fim de testar se o objeto retornado n√£o √© o mesmo que foi passado como par√¢metro para a fun√ß√£o
removerPropriedade, voc√™ poder√° usar a fun√ß√£o Object.is(), por exemplo:
Object.is(removerPropriedade(objeto, "descricao"), objeto)
Retornar√° false se o objeto n√£o for o mesmo.
*/


function removerPropriedade(objeto, elementoDoObjeto) {
    const copia = { ...objeto }
    delete copia[elementoDoObjeto]
    console.log(copia)
}
removerPropriedade({ a: 1, b: 2 }, "a")

/*Crie uma fun√ß√£o que receba um array de elementos e retorne um array somente com os n√∫meros presentes no
array recebido como par√¢metro.
Exemplos:
filtrarNumeros(["Javascript", 1, "3", "Web", 20]) // retornar√° [1, 20]
filtrarNumeros(["a", "c"]) // retornar√° []
*/


function filtrarNumeros(elementos) {
    console.log(elementos.filter(item => typeof item === "number"))

}

filtrarNumeros(["Javascript", 1, "3", "Web", 20])
filtrarNumeros(["a", "c"])


/*desenvolva uma fun√ß√£o que recebe como parametro um objeto e retorne um array com arrays*/



var objeto = {
    nome: 'Maria',
    profiss√£o: 'desenvolvedora de software'
}

console.log(Object.entries(objeto));


/*elabore uma fun√ß√£o de numeros pares que retorne um array com os numeros e indices pares*/


function retornaPares(n) {
    let numerosPares = []
    for (let i = 0; i <= n; i++) {
        if (i % 2 === 0) {
            numerosPares.push(i)
        }
    }
    return numerosPares
}

retornaPares(20)

function retornaNNumerosPares(n) {

    let resultado = [];
    for (let i = 0; i < n; i += 2) {
        if (i % 2 == 0) {
            resultado.push(n[i])
        }
    }
    return resultado;
}
retornaNNumerosPares(20)



for (let i = 0; i < 8; i += 2) {
    let numeros = (10)
    const numeroPar = numeros[i] % 2 === 0
    if (numeroPar)
        console.log(resultado.push(numeros[i]))
}

function retornaNNumerosPares(n) {

    let numerosPares = [];
    for (let i = 0; i < n; i++) {
        if (i % 2 == 0) {
            numerosPares.push(i)
        }
    }
    return numerosPares;
}
retornaNNumerosPares(5)



/*fa√ßa uma fun√ß√£o que determine se o ano √© bissexto regras: multiplo de 4 e n√£o pode ser multiplo de 100 exceto se tambem for multiplo de 400*/


function bissexto(ano) {
    const multiplo4 = ano % 4 === 0
    const multiplo100 = ano % 100 === 0
    const multiplo400 = ano % 400 === 0

    return(multiplo4 && !multiplo100) || multiplo400

}

console.log(bissexto(2022))

/*Escreva uma fun√ß√£o que receba um array de n√∫meros e retornar√° a soma de todos os n√∫meros desse array.
Exemplos:
somarNumeros([10, 10, 10]) // retornar√° 30
somarNumeros([15, 15, 15, 15]) // retornar√° 60

*/

var numeros = [1, 2, 3, 4, 5, 6];
var total = numeros.reduce((total, numero) => total + numero, 0);


console.log(total);

/*Voc√™ est√° trabalhando numa aplica√ß√£o pessoal de controle de despesas. Na tela principal dessa aplica√ß√£o, √©
poss√≠vel adicionar produtos ou servi√ßos, informando nome, categoria e pre√ßo. Uma funcionalidade que voc√™ est√°
desenvolvendo no momento √© a de somar o total das despesas.
Crie uma fun√ß√£o que receba um array de produtos e retorne o total das despesas.
Exemplos:
despesasTotais([
{nome: "Jornal online", categoria: "Informa√ß√£o", preco: 89.99},
{nome: "Cinema", categoria: "Entretenimento", preco: 150}
]) // retornar√° 239.99
despesasTotais([
{nome: "Galaxy S20", categoria: "Eletr√¥nicos", preco: 3599.99},
{nome: "Macbook Pro", categoria: "Eletr√¥nicos", preco: 30999.90}
]) // retornar√° 34599.89 */


/*Nesse ano de elei√ß√µes, os candidatos a presidente est√£o apresentando seus programas de governo.
Um desses programas √© sobre a agricultura familiar. √â bem interessante, vamos analisar a sua
experi√™ncia.
Ele fez uma experi√™ncia com 13.500 agricultores e verificou-se que:
‚Ä¢ 7.000 plantam arroz;
‚Ä¢ 4.100 plantam banana;
‚Ä¢ 3.100 plantam uva;
‚Ä¢ 2.100 plantam arroz e banana;
‚Ä¢ 1.400 plantam arroz e uva;
‚Ä¢ 1.000 plantam banana e uva;
‚Ä¢ 400 plantam arroz, banana e uva.
Tendo essas informa√ß√µes, vamos responder com a l√≥gica:
a) Quantos plantam pelo menos uma das tr√™s esp√©cies?
b) Quantos n√£o plantam nenhuma das tr√™s esp√©cies?
c) Quantos plantam arroz ou banana, mas n√£o plantam uvas?
d) Quantas plantam apenas uvas?*/


const plantamArroz = 7000
const plantamBanana = 4100
const plantamUva = 3100
const plantamArrozeBanana = 2100
const plantamArrozeUva = 1400
const plantamBananaeUva = 1000
const plantamArrozeBananaeUva = 400
const plantamAs3epecies = (plantamArroz + plantamBanana + plantamUva)


/*c) Quantos plantam arroz ou banana, mas n√£o plantam uvas?*/
console.log(plantamArroz || plantamBanana && !plantamUva)

/* calculadora*/

function multiplicar(numx, numy) {
    let resultado = 0
    for (let i = 0; i < numy; i++)
        resultado += numx
    return resultado

}

function somar(numx, numy) {
    return numx + numy
    
}

function subtrair(numx, numy) {
    return numx - numy
    
}

/* escreva uma fun√ß√£o que recebe 2 numerps e retorne o maior deles*/

function nummax(x, y) {
    console.log(Math.max(x, y))
}

nummax(58, 10)


function nummaxx(a, b) {
    
    return a > b ? a : b 
}

console.log(nummaxx(7, 55))

let max = (d, e) => d > e ? d : e

console.log(max(1, 3))


/* fiz buzz */
function fizbuz(i) {
    if (i % 3 === 0 & i % 5 === 0) {
    return 'fizzBuzz'
} else if (i % 3 != 0 & i % 5 != 0) {
    return i
} else if (i % 3 === 0) {
    return 'fiz'
} else if (i % 5 === 0) {
    return 'Buzz'
} else if (i != number) {
    return i  
} else {
    return i  
}
}



for (let h = 0; h <= 100; h++) {
    console.log(h, fizbuz(h)) 
}

